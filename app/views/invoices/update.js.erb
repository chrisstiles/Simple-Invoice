<% if @invoice.errors.any? %>


setTimeout(function() {
	var oldContent = $('.buttoncontent').text();
	var button = $('.hasloadingtext');

	if (button.is('input')) {
	button.val(oldContent);
	} else {
	button.text(oldContent);
	}

	button.removeClass('loading hasloadingtext');
}, 200);



// Variables
var pageBody = $('body'),
	validationErrors = $('#validationerrors'),
	errorHolder = $('#errorholder');


<% @invoice.errors.each do |key, message| %>

var key = "<%= key %>"
var message = "<%= message %>"

//console.log('<%= message %>')

var errorInput = $("input[name='invoice[" + key + "]");
var errorContentEditable = $("*[name='invoice[" + key + "]'").not(':input');

if (key.indexOf('jobs.') > -1) {
	key = key.replace('jobs.', '');
	errorContentEditable = $('.' + key);
}

errorContentEditable.addClass('haserror');

if (message.indexOf('long') > -1) {
	var maxLength = message.replace( /\D/g, '');
	errorContentEditable.attr('data-maxlength', maxLength);
}

if (message.indexOf('blank') > -1 || message.indexOf('number')) {
	errorContentEditable.not(':empty').removeClass('haserror');
}

//if (message.indexOf('long') > -1) {
//	var maxLength = message.replace( /\D/g, '');
//	var correctLength = errorContentEditable.filter(function(el) {
//		return el.text().length <= maxLength
//
//	var wrongLength = errorContentEditable.filter(function(el) {
//		return el.text().length > maxLength
//	});

//	correctLength.not(':empty').removeClass('haserror');
//	wrongLength.addClass('haserror');

	//if (errorContentEditable.text().length <= maxLength) {
	//	errorContentEditable.not(':empty').removeClass('haserror');
	//} else {
	//	errorContentEditable.addClass('haserror');
	//}
//}

//validationErrors.append('<%= key %>' + ' ' + '<%= message %>')

<% end %>

errorHolder.empty();

// Add errors to elements with too much content
$('[data-maxlength]').each(function(i) {
	var $this = $(this);
	var length = $this.text().length;
	var maxLength = $this.data('maxlength');
	if (length > maxLength) {
		$this.addClass('haserror');
	} else {
		$this.removeClass('haserror');
	}
});

<% @invoice.errors.full_messages.each do |message| %>

var message = '<%= message %>'

if (message.indexOf('Jobs ') > -1) {
	message = message.replace('Jobs j', 'J');
}


errorHolder.append('<p>' + message + '</p>');

<% end %>

<% end %>

// Remove duplicate errors

var seen = {};

$('#errorholder p').each(function() {
    var txt = $(this).text();
    if (seen[txt])
        $(this).remove();
    else
        seen[txt] = true;
});

// Show the validation errors list after they are added

if ($('#invoicewrapper').hasClass('edit')) {

var validationsHeight = validationErrors.outerHeight(),
	negativeValidationsHeight = -1 * validationsHeight;

validationErrors.css({
	'margin-bottom' : negativeValidationsHeight,
	'display' : 'block'
});

validationsHeight += 35;

$('#invoicewrapper').css({
  '-webkit-transform' : 'translateY(' + validationsHeight + 'px)',
  '-moz-transform'    : 'translateY(' + validationsHeight + 'px)',
  '-ms-transform'     : 'translateY(' + validationsHeight + 'px)',
  '-o-transform'      : 'translateY(' + validationsHeight + 'px)',
  'transform'         : 'translateY(' + validationsHeight + 'px)'
});

// Remove red background when input is changed
pageBody.on('change keyup', ':input, [contenteditable=true]', function() {
	var $this = $(this);
	$this.removeClass('haserror');

	if ($this.hasClass('clientnameinput')) {
		$('#e-clientname').removeClass('haserror');
	}
});

} else {
	var amountPaid = $('#e-amountpaid');
	var amountPaidWidth = amountPaid.outerWidth();
	var amountPaidLocation = amountPaid.offset();

	validationErrors.offset({
		top: amountPaidLocation.top,
		left: amountPaidLocation.left + amountPaidWidth + 20
	});

	validationErrors.show();

	var validationsHeight = validationErrors.outerHeight() / 4

	validationErrors.css({
	  '-webkit-transform' : 'translateY(-' + validationsHeight + 'px)',
	  '-moz-transform'    : 'translateY(-' + validationsHeight + 'px)',
	  '-ms-transform'     : 'translateY(-' + validationsHeight + 'px)',
	  '-o-transform'      : 'translateY(-' + validationsHeight + 'px)',
	  'transform'         : 'translateY(-' + validationsHeight + 'px)'
	});
}


