// Variables
var pageBody = $('body'),
	validationErrors = $('#validationerrors'),
	errorHolder = $('#errorholder');

	$('.homeamountpaiderror').hide();

// Find which invoice submitted the remote form
var homeInvoice = $('*[data-invoice-number="<%= @invoice.invoice_number %>"]');

pageBody.removeClass('homerecordclicked');

setTimeout(function() {
	var oldContent = $('.buttoncontent').text();
	var button = $('.hasloadingtext');

	if (button.is('input')) {
		button.val(oldContent);
		button.prop('disabled', false);
	} else {
		button.text(oldContent);
	}

	button.removeClass('loading hasloadingtext');
	$('.buttoncontent').remove();

}, 200);

<% if @invoice.errors.any? %>


<% @invoice.errors.each do |key, message| %>

var key = "<%= key %>"
var message = "<%= message %>"

var errorInput = $("input[name='invoice[" + key + "]']");
var errorContentEditable = $("*[name='invoice[" + key + "]']").not(':input');

if (key.indexOf('jobs.') > -1) {
	key = key.replace('jobs.', '');
	errorContentEditable = $('.' + key);
}

errorContentEditable.addClass('haserror');

if (message.indexOf('long') > -1) {
	var maxLength = message.replace( /\D/g, '');
	errorContentEditable.attr('data-maxlength', maxLength);
}

if (message.indexOf('blank') > -1 || message.indexOf('number')) {
	errorContentEditable.not(':empty').removeClass('haserror');
}

<% end %>

errorHolder.empty();

// Add errors to elements with too much content
$('[data-maxlength]').each(function(i) {
	var $this = $(this);
	var length = $this.text().length;
	var maxLength = $this.data('maxlength');
	if (length > maxLength) {
		$this.addClass('haserror');
	} else {
		$this.removeClass('haserror');
	}
});

<% @invoice.errors.full_messages.each do |message| %>

var message = '<%= message %>'

if (message.indexOf('Jobs ') > -1) {
	message = message.replace('Jobs j', 'J');
}


errorHolder.append('<p>' + message + '</p>');

<% end %>

<% else %> // No Errors

<% if @invoice.errors.none? %>

// Code for home page submissions
if ($('.homeinvoice').length) {

	$('.success').remove();

	pageBody.append('<div class="success"> <div class="successtimer"></div><div class="closesuccess"></div><span><%= flash[:success] %></span></div>');
	<% flash.discard %>


	homeInvoice.find('.homeinvoicebalance').find('span').removeAttr('class').addClass('<%= @invoice.invoice_status_class %>').text('<%= number_to_currency(@invoice.total - @invoice.amount_paid) %>')

	homeInvoice.find('.invoicestatus').html("<%= @invoice.print_days_until_due %>");

	homeInvoice.find('.homeamountpaiderror').hide();

	homeInvoice.find('.homeclose span').text('Record Payment');
	homeInvoice.find('.homeclose').removeClass('homeclose');
	homeInvoice.find('.homeinvoiceinfowrapper').children().removeClass('active');

	$('.homenumberdue').html("<%= pluralize(number_of_due_invoices, 'invoice') %> due and not paid in full.");
	$('#hometotaldue').html(" Total Due: <span <%= 'class=overdue' if total_amount_due > 0 %>><%= number_to_currency(total_amount_due) %>");
	
}

<% end %>

<% end %>

// Remove duplicate errors

var seen = {};

$('#errorholder p').each(function() {
    var txt = $(this).text();
    if (seen[txt])
        $(this).remove();
    else
        seen[txt] = true;
});

// Show the validation errors list after they are added

if ($('#invoicewrapper').hasClass('edit')) {

var validationsHeight = validationErrors.outerHeight(),
	negativeValidationsHeight = -1 * validationsHeight;

validationErrors.css({
	'margin-bottom' : negativeValidationsHeight,
	'display' : 'block'
});

validationsHeight += 15;

$('#invoicewrapper').css({
  '-webkit-transform' : 'translateY(' + validationsHeight + 'px)',
  '-moz-transform'    : 'translateY(' + validationsHeight + 'px)',
  '-ms-transform'     : 'translateY(' + validationsHeight + 'px)',
  '-o-transform'      : 'translateY(' + validationsHeight + 'px)',
  'transform'         : 'translateY(' + validationsHeight + 'px)'
});


} else {

	if (!validationErrors.hasClass('hastransformed')) {

		validationErrors.removeAttr('style');


		if ($('.homeinvoice').length) {
			var amountPaid = homeInvoice.find('.e-amountpaid');
		} else {
			var amountPaid = $('.e-amountpaid');
		}
		
		var amountPaidWidth = amountPaid.outerWidth();
		var amountPaidLocation = amountPaid.offset();
		//var amountPaidPosition = amountPaid.position();
		var invoiceOffset = homeInvoice.offset();
		//var invoicesWrapperOffset = $('#invoiceswrapper').offset();

		var searchResultsOffset = $('#searchresults').offset()

		if ($('.homeinvoice').length) {
			var errorBox = amountPaid.siblings('.homeamountpaiderror');

			validationErrors.detach().prependTo(errorBox);
			
			<% if @invoice.errors.any? %>
				errorBox.show();
			<% end %>

		} else {
			validationErrors.offset({
				top: amountPaidLocation.top,
				left: amountPaidLocation.left + amountPaidWidth + 20
			});
		}
		

		if ($('#invoicewrapper').hasClass('show')) {

		validationErrors.show();	

		var validationsHeight = validationErrors.outerHeight() / 4

		validationErrors.css({
		  '-webkit-transform' : 'translateY(-' + validationsHeight + 'px)',
		  '-moz-transform'    : 'translateY(-' + validationsHeight + 'px)',
		  '-ms-transform'     : 'translateY(-' + validationsHeight + 'px)',
		  '-o-transform'      : 'translateY(-' + validationsHeight + 'px)',
		  'transform'         : 'translateY(-' + validationsHeight + 'px)'
		});

		
			validationErrors.addClass('hastransformed');
		}

	}
}


