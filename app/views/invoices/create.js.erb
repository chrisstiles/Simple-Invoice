// Variables
var pageBody = $('body'),
	validationErrors = $('#validationerrors'),
	errorHolder = $('#errorholder');

<% if @invoice.errors.any? %>

setTimeout(function() {
	var oldContent = $('.buttoncontent').text();
	var button = $('.hasloadingtext');

	if (button.is('input')) {
		button.val(oldContent);
		button.prop('disabled', false);
	} else {
	button.text(oldContent);
	}

	button.removeClass('loading hasloadingtext');
	$('.buttoncontent').remove();
	
}, 200);

<% @invoice.errors.each do |key, message| %>

var key = "<%= key %>";
var message = "<%= message %>";


var errorContentEditable = $("*[name='invoice[" + key + "]']").not(':input');


if (key.indexOf('jobs.') > -1) {
	key = key.replace('jobs.', '');
	errorContentEditable = $('.' + key);
}

errorContentEditable.addClass('haserror');

if (message.indexOf('long') > -1) {
	var maxLength = message.replace( /\D/g, '');
	errorContentEditable.attr('data-maxlength', maxLength);
}

if (message.indexOf('blank') > -1 || message.indexOf('number')) {
	errorContentEditable.not(':empty').removeClass('haserror');
}


<% end %>

errorHolder.empty();

// Add errors to elements with too much content
$('[data-maxlength]').each(function() {
	var $this = $(this);
	var length = $this.text().length;
	var maxLength = $this.data('maxlength');
	if (length > maxLength) {
		$this.addClass('haserror');
	} else {
		$this.removeClass('haserror');
	}
});

<% @invoice.errors.full_messages.each do |message| %>


var message = '<%= message %>';

if (message.indexOf('Jobs j') > -1) {
	message = message.replace('Jobs j', 'J');
}


errorHolder.append('<p>' + message + '</p>');

<% end %>

<% end %>

// Remove duplicate errors

var seen = {};

$('#errorholder p').each(function() {
    var txt = $(this).text();
    if (seen[txt]) {
        $(this).remove();
    }
    else {
        seen[txt] = true;
    }
});

// Show the validation errors list after they are added

var validationsHeight = validationErrors.outerHeight(),
	negativeValidationsHeight = -1 * validationsHeight;

validationErrors.css({
	//'margin-bottom' : negativeValidationsHeight,
	'display' : 'block'
});

validationsHeight += 15;

var invoiceWrapper = $('#invoicewrapper');

// if (pageBody.hasClass('ios') || pageBody.hasClass('android')) {
// 	var invoiceWrapper = $('#mobilescrollwrapper');
// } else {
// 	var invoiceWrapper = $('#invoicewrapper');
// }

if (pageBody.hasClass('homepage')) {
// Is on home page

	//validationsHeight -= 15;

	invoiceWrapper.css({
		'top': negativeValidationsHeight,
		'-webkit-transform' : 'translateY(' + validationsHeight + 'px)',
		'-moz-transform'    : 'translateY(' + validationsHeight + 'px)',
		'-ms-transform'     : 'translateY(' + validationsHeight + 'px)',
		'-o-transform'      : 'translateY(' + validationsHeight + 'px)',
		'transform'         : 'translateY(' + validationsHeight + 'px)'
	});

} else {
// Not on home page	

	invoiceWrapper.css({
		'top': negativeValidationsHeight,
		'margin-bottom' : 15,
		'-webkit-transform' : 'translateY(' + validationsHeight + 'px)',
		'-moz-transform'    : 'translateY(' + validationsHeight + 'px)',
		'-ms-transform'     : 'translateY(' + validationsHeight + 'px)',
		'-o-transform'      : 'translateY(' + validationsHeight + 'px)',
		'transform'         : 'translateY(' + validationsHeight + 'px)'
	});


}


